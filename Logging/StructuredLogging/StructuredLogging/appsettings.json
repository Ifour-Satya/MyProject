//{
//  "Serilog": {
//    "MinimumLevel": {
//      // Global minimum log level. Only events with this level or higher will be logged.
//      "Default": "Information",
//      // Override minimum levels for specific namespaces to reduce noise
//      "Override": {
//        "Microsoft": "Warning", // Only log Microsoft libraries at Warning level and above
//        "System": "Error" // Only log System namespaces at Error level and above
//      }
//    },
//    "WriteTo": [
//      {
//        // Configure the Console sink for real-time logging
//        "Name": "Console",
//        "Args": {
//          // Defines the output format for the console logs.
//          // The template includes a timestamp, log level, custom properties, message, new line, and exception details.
//          "outputTemplate": "{Timestamp:yyyy-MM-dd HH:mm:ss } [{Level:u3}] [{Application}/{Server}] {Message:lj}{NewLine}{Exception}"
//        }
//      },
//      {
//        // Configure the File sink for persistent logging
//        "Name": "File",
//        "Args": {
//          // Log file path with a placeholder (-) that will be replaced based on the rolling interval.
//          "path": "Logs/MyAppLog-.txt",
//          // Create a new log file daily.
//          "rollingInterval": "Day",
//          // Use the same output format as the Console sink.
//          "outputTemplate": "{Timestamp:yyyy-MM-dd HH:mm:ss } [{Level:u3}] [{Application}/{Server}] {Message:lj}{NewLine}{Exception}"
//        }
//      }
//    ],
//    // Global properties to include additional context with every log event.
//    "Properties": {
//      "Application": "App-LoggingDemo",
//      "Server": "Server-125.08.13.1"
//    }
//  }
//}




////Remove the Older Text files using Serilog in ASP.NET Core Web API with Configurations


//{
//  "Serilog": {
//    "MinimumLevel": {
//      "Default": "Information",
//      "Override": {
//        "Microsoft": "Warning",
//        "System": "Error"
//      }
//    },
//    "WriteTo": [
//      {
//        "Name": "File",
//        "Args": {
//          "path": "Logs/MyAppLog-.txt", // Log file path with a placeholder for the rolling file name.
//          "rollingInterval": "Day", // Creates a new log file every day.
//          "retainedFileCountLimit": 30, // Retains only the latest 30 log files; older files are automatically deleted.
//          "fileSizeLimitBytes": 10485760, // Maximum file size set to 10 MB per file.
//          "rollOnFileSizeLimit": true, // Rolls over to a new file if the current file exceeds the size limit.
//          "outputTemplate": "{Timestamp:yyyy-MM-dd HH:mm:ss} [{Level:u3}] {Message:lj}{NewLine}{Exception}"
//          // Formats each log entry with timestamp, level, message, newline, and exception details.
//        }
//      }
//    ]
//  }
//}




////Asynchronous Serilog in ASP.NET Core Web API with Configurations


{
  "Serilog": {
    "MinimumLevel": {
      "Default": "Information",
      "Override": {
        "Microsoft": "Warning",
        "System": "Error"
      }
    },
    "WriteTo": [
      {
        // Wrap sinks with the Async sink to enable asynchronous logging.
        "Name": "Async",
        "Args": {
          "configure": [
            {
              // Asynchronously log to the Console.
              "Name": "Console",
              "Args": {
                // Console sink configuration
                "outputTemplate": "{Timestamp:yyyy-MM-dd HH:mm:ss} [{Level:u3}] [{Application}/{Server}] {Message:lj}{NewLine}{Exception}"
              }
            },
            {
              // Asynchronously log to a file with rolling, retention, and file size limit settings.
              "Name": "File",
              "Args": {
                // File sink configuration
                "path": "Logs/MyAppLog-.txt",
                "rollingInterval": "Day",
                "retainedFileCountLimit": 30,
                "fileSizeLimitBytes": 10485760, // 10 MB per file (10 * 1024 * 1024 bytes)
                "rollOnFileSizeLimit": true,
                "outputTemplate": "{Timestamp:yyyy-MM-dd HH:mm:ss} [{Level:u3}] [{Application}/{Server}] {Message:lj}{NewLine}{Exception}"
              }
            }
          ]
        }
      }
    ],
    "Properties": {
      // Global properties to add additional information to each log event.
      "Application": "App-LoggingDemo",
      "Server": "Server-125.08.13.1"
    }
  }
}